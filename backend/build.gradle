plugins {
  id 'java'
  id 'pmd'
  id 'jacoco'
  id 'org.springframework.boot' version '1.5.1.RELEASE'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
  mavenCentral()
  jcenter()
  maven { url 'http://repo.spring.io/snapshot' }
  maven { url 'http://repo.spring.io/milestone' }
}

dependencies {

  // Embedded Apache Tomcat webserver
  compile "org.apache.tomcat.embed:tomcat-embed-core:8.5.9"

  // Spring framework
  compile "org.springframework.boot:spring-boot-starter-web"
  compile "org.springframework.boot:spring-boot-starter-thymeleaf"
  compile "org.springframework:spring-beans:4.3.6.RELEASE"
  compile "org.springframework:spring-context:4.3.6.RELEASE"
  compile "org.springframework:spring-context-support:4.3.6.RELEASE"
  compile "org.springframework:spring-core:4.3.6.RELEASE"
  compile "org.springframework:spring-web:4.3.6.RELEASE"
  testCompile "org.springframework.boot:spring-boot-starter-test"

  // Google Guava library for Cache implementation
  compile 'com.google.guava:guava:19.0'

  // iCal4j library to work with iCalendar data format
  compile "org.mnode.ical4j:ical4j:1.+"

  // JUnit and Mockito testing libraries
  testCompile "junit:junit:4.12"
  testCompile "org.mockito:mockito-core:1.+"
}

test {
  finalizedBy jacocoTestReport
}

pmd {
  ruleSets = [
          "java-basic",
          "java-braces",
          "java-codesize"
  ]
}

task wrapper(type: Wrapper) {
  gradleVersion = "2.14.1"
}

/*
 * Gets the version name from the latest Git tag
 *
 */
def getVersionName = { ->
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'describe', '--tags'
    standardOutput = stdout
  }
  return stdout.toString().trim()
}

version = getVersionName()

task copyJS(type: Copy) {
  from '../frontend/dist'
  into 'src/main/resources/public/built/'
}

copyJS.dependsOn(':frontend:webpack')

processResources.dependsOn('copyJS')